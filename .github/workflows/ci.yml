name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        run: |
          golangci-lint run --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true

      - name: Run tests with coverage
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true

      - name: Get version info
        id: get_version
        run: |
          VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "0.1.1")
          GIT_COMMIT=$(git rev-parse --short HEAD)
          GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "git_commit=${GIT_COMMIT}" >> $GITHUB_OUTPUT
          echo "git_branch=${GIT_BRANCH}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ steps.get_version.outputs.version }}
          GIT_COMMIT: ${{ steps.get_version.outputs.git_commit }}
          GIT_BRANCH: ${{ steps.get_version.outputs.git_branch }}
          BUILD_DATE: ${{ steps.get_version.outputs.build_date }}
        run: |
          BINARY_NAME=stablemcp
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          LDFLAGS="-s -w -X github.com/mkm29/stablemcp/internal/version.Version=${VERSION} -X github.com/mkm29/stablemcp/internal/version.GitCommit=${GIT_COMMIT} -X github.com/mkm29/stablemcp/internal/version.GitBranch=${GIT_BRANCH} -X github.com/mkm29/stablemcp/internal/version.BuildDate=${BUILD_DATE}"
          go build -ldflags "${LDFLAGS}" -o "bin/${BINARY_NAME}_${GOOS}_${GOARCH}" ./main.go

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: stablemcp_${{ matrix.goos }}_${{ matrix.goarch }}
          path: bin/stablemcp_${{ matrix.goos }}_${{ matrix.goarch }}*
          retention-days: 7